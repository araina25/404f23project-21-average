openapi: 3.0.3
info:
  title: 21 Average Social Distribution API
  version: 1.0.0
  description: Social Distribution API for 21 Average
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
        - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
        - api
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
        - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Register"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Register"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
          description: ""
  /api/auth/user/:
    get:
      operationId: api_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - api
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    put:
      operationId: api_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    patch:
      operationId: api_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
  /authors:
    get:
      operationId: authors_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAuthorList"
          description: ""
    post:
      operationId: authors_create
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Author"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Author"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
          description: ""
  /authors/{author_id}/posts:
    get:
      operationId: authors_posts_list
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPostList"
          description: ""
    post:
      operationId: authors_posts_create
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
  /authors/{author_id}/posts/{like_id}/likes:
    get:
      operationId: authors_posts_likes_list
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLikeList"
          description: ""
    post:
      operationId: authors_posts_likes_create
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Like"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Like"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Like"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
  /authors/{author_id}/posts/{like_id}/likes/{id}:
    get:
      operationId: authors_posts_likes_retrieve
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    put:
      operationId: authors_posts_likes_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Like"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Like"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Like"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    patch:
      operationId: authors_posts_likes_partial_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedLike"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedLike"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedLike"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    delete:
      operationId: authors_posts_likes_destroy
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
        - in: path
          name: like_id
          schema:
            type: string
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /authors/{author_id}/posts/{id}:
    get:
      operationId: authors_posts_retrieve
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    put:
      operationId: authors_posts_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    patch:
      operationId: authors_posts_partial_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedPost"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedPost"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    delete:
      operationId: authors_posts_destroy
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "204":
          description: No response body
  /authors/{author_id}/posts/{post_id}/comments:
    get:
      operationId: authors_posts_comments_list
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCommentList"
          description: ""
    post:
      operationId: authors_posts_comments_create
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Comment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
  /authors/{author_id}/posts/{post_id}/comments/{id}:
    get:
      operationId: authors_posts_comments_retrieve
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    put:
      operationId: authors_posts_comments_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Comment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    patch:
      operationId: authors_posts_comments_partial_update
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedComment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedComment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedComment"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    delete:
      operationId: authors_posts_comments_destroy
      parameters:
        - in: path
          name: author_id
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
        - in: path
          name: post_id
          schema:
            type: string
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /authors/{id}:
    get:
      operationId: authors_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this author.
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
          description: ""
    put:
      operationId: authors_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this author.
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Author"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Author"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
          description: ""
    patch:
      operationId: authors_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this author.
          required: true
      tags:
        - authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedAuthor"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedAuthor"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedAuthor"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
          description: ""
    delete:
      operationId: authors_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this author.
          required: true
      tags:
        - authors
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /comment:
    get:
      operationId: comment_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - comment
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCommentList"
          description: ""
    post:
      operationId: comment_create
      tags:
        - comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Comment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
  /comment/{id}:
    get:
      operationId: comment_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
      tags:
        - comment
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    put:
      operationId: comment_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
      tags:
        - comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Comment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    patch:
      operationId: comment_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
      tags:
        - comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedComment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedComment"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedComment"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
    delete:
      operationId: comment_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this comment.
          required: true
      tags:
        - comment
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /like:
    get:
      operationId: like_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - like
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLikeList"
          description: ""
    post:
      operationId: like_create
      tags:
        - like
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Like"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Like"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Like"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
  /like/{id}:
    get:
      operationId: like_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
      tags:
        - like
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    put:
      operationId: like_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
      tags:
        - like
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Like"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Like"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Like"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    patch:
      operationId: like_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
      tags:
        - like
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedLike"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedLike"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedLike"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
          description: ""
    delete:
      operationId: like_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this like.
          required: true
      tags:
        - like
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
      responses:
        "204":
          description: No response body
  /posts:
    get:
      operationId: posts_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - posts
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPostList"
          description: ""
    post:
      operationId: posts_create
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
  /posts/{id}:
    get:
      operationId: posts_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - posts
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    put:
      operationId: posts_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    patch:
      operationId: posts_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedPost"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedPost"
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
          description: ""
    delete:
      operationId: posts_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this post.
          required: true
      tags:
        - posts
      security:
        - tokenAuth: []
        - jwtAuth: []
        - basicAuth: []
        - {}
      responses:
        "204":
          description: No response body
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        host:
          type: string
          maxLength: 255
        displayName:
          type: string
          maxLength: 255
        github:
          type: string
        user:
          type: integer
          readOnly: true
        profileImage:
          type: string
      required:
        - displayName
        - github
        - host
        - id
        - profileImage
        - user
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        commenter:
          type: string
          format: uuid
          readOnly: true
        parentPost:
          type: string
          format: uuid
          readOnly: true
        comment:
          type: string
        contentType:
          type: string
          maxLength: 255
        published:
          type: string
          format: date-time
      required:
        - comment
        - commenter
        - contentType
        - id
        - parentPost
        - published
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          type: string
          format: uuid
        post:
          type: string
          format: uuid
        published:
          type: string
          format: date-time
      required:
        - author
        - id
        - post
        - published
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    PaginatedAuthorList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Author"
    PaginatedCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    PaginatedLikeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Like"
    PaginatedPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    PatchedAuthor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        host:
          type: string
          maxLength: 255
        displayName:
          type: string
          maxLength: 255
        github:
          type: string
        user:
          type: integer
          readOnly: true
        profileImage:
          type: string
    PatchedComment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        commenter:
          type: string
          format: uuid
          readOnly: true
        parentPost:
          type: string
          format: uuid
          readOnly: true
        comment:
          type: string
        contentType:
          type: string
          maxLength: 255
        published:
          type: string
          format: date-time
    PatchedLike:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          type: string
          format: uuid
        post:
          type: string
          format: uuid
        published:
          type: string
          format: date-time
    PatchedPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        source:
          type: string
          maxLength: 255
        origin:
          type: string
          maxLength: 255
        description:
          type: string
        contentType:
          type: string
          maxLength: 255
        content:
          type: string
        published:
          type: string
          format: date-time
        categories:
          type: string
        count:
          type: integer
          readOnly: true
        owner:
          type: string
          format: uuid
          readOnly: true
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        source:
          type: string
          maxLength: 255
        origin:
          type: string
          maxLength: 255
        description:
          type: string
        contentType:
          type: string
          maxLength: 255
        content:
          type: string
        published:
          type: string
          format: date-time
        categories:
          type: string
        count:
          type: integer
          readOnly: true
        owner:
          type: string
          format: uuid
          readOnly: true
      required:
        - categories
        - content
        - contentType
        - count
        - description
        - id
        - origin
        - owner
        - published
        - source
        - title
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
        - password1
        - password2
        - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
        - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
        - key
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - email
        - pk
        - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
