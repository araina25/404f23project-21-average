{"version":3,"file":"createPostComponent-6d6a6641.js","sources":["../../../../pages/createPostComponent.vue"],"sourcesContent":["<!-- CreatePostComponent.vue -->\n<template>\n    <div class=\"create-post\">\n      <textarea v-model=\"postContent\" placeholder=\"What's on your mind?\"></textarea>\n  \n      <div class=\"post-actions\">\n        <label class=\"upload-image\">\n          Upload Image\n          <input type=\"file\" @change=\"onImageSelected\">\n        </label>\n        <div class=\"toggle-container\">\n          <label class=\"switch\">\n            <input type=\"checkbox\" v-model=\"isPublic\">\n            <span class=\"slider\"></span>\n          </label>\n          <span>{{ isPublic ? 'Public' : 'Private' }}</span>\n        </div>\n      </div>\n  \n      <button @click=\"submitPost\">Post</button>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        postContent: '',\n        postImage: null,\n        isPublic: true\n      };\n    },\n    methods: {\n      onImageSelected(event) {\n        const file = event.target.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = (e) => {\n            this.postImage = e.target.result;\n          };\n        }\n      },\n      async submitPost() {\n        try {\n          const payload = {\n            type: this.isPublic ? 'public' : 'private', // Adjust as per your requirement\n            title: '', // You can add a title input field in your template\n            source: '', // Adjust as per your requirement\n            origin: '', // Adjust as per your requirement\n            description: '', // You can add a description input field in your template\n            contentType: '', // Adjust based on your content type\n            content: this.postContent,\n            published: new Date().toISOString(),\n            owner: 'UserID', // Adjust with your actual owner id\n            categories: '', // Adjust as per your requirement\n            count: 0 // Adjust as per your requirement\n          };\n          const response = await axios.post('http://localhost:8000/api/posts', payload);\n          if (response.status === 200 || response.status === 201) {\n            // Handle success scenario\n            console.log('Post created successfully:', response.data);\n          } else {\n            // Handle any other response scenario\n            console.error('Error creating post:', response);\n          }\n        } catch (error) {\n          console.error('Error while creating post:', error);\n        }\n      }\n    }\n  };\n  </script>\n  \n  \n  <style scoped>\n  .create-post {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 25px;\n    width: 400px;\n    height: 400px;\n    background-color: #00C58E;\n    border-radius: 15px;\n  }\n  \n  textarea {\n    width: 95%;\n    height: 200px;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid black;\n    background-color: black;\n    color: white;\n    margin-bottom: 15px;\n  }\n  \n  .post-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 95%;\n    margin-bottom: 15px;\n  }\n  \n  .upload-image input[type=\"file\"] {\n    display: none;\n  }\n  \n  .upload-image {\n    cursor: pointer;\n    background-color: black;\n    color: white;\n    padding: 6px 12px;\n    border-radius: 5px;\n  }\n  \n  button {\n    width: 95%;\n    padding: 12px;\n    background-color: black;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n  \n  button:hover {\n    background-color: #333;\n  }\n  \n  .switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 20px; /* Adjusted to make it rectangular */\n  }\n  \n  .switch input { \n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n  \n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: black;\n    transition: 0.4s;\n    border-radius: 10px;  /* Rounded edges for the slider */\n  }\n  \n  .slider:before {\n    position: absolute;\n    content: \"\";\n    height: 15px;\n    width: 15px;\n    left: 3px;\n    bottom: 3px;\n    background-color:  #00C58E;\n    transition: 0.4s;\n    margin-bottom: -1px;\n    border-radius: 7px;  /* Rounded edges for the handle */\n  }\n  \n  input:checked + .slider {\n    background-color:black ;\n  }\n  \n  input:checked + .slider:before {\n    transform: translateX(29px);\n    display: flex;\n    align-items: center;\n  }\n  \n  .toggle-container span {\n    margin-left: 10px;\n    color: black;\n  }\n  </style>\n  "],"names":["_ssrRenderAttrs","_mergeProps"],"mappings":";;;;;;;;;;;;;;;;;;;AA0BE,MAAK,YAAU;AAAA,EACb,OAAO;AACL,WAAO;AAAA,MACL,aAAa;AAAA,MACb,WAAW;AAAA,MACX,UAAU;AAAA;EAEb;AAAA,EACD,SAAS;AAAA,IACP,gBAAgB,OAAO;AACrB,YAAM,OAAO,MAAM,OAAO,MAAM,CAAC;AACjC,UAAI,MAAM;AACR,cAAM,SAAS,IAAI;AACnB,eAAO,cAAc,IAAI;AACzB,eAAO,SAAS,CAAC,MAAM;AACrB,eAAK,YAAY,EAAE,OAAO;AAAA;MAE9B;AAAA,IACD;AAAA,IACD,MAAM,aAAa;AACjB,UAAI;AACF,cAAM,UAAU;AAAA,UACd,MAAM,KAAK,WAAW,WAAW;AAAA;AAAA,UACjC,OAAO;AAAA;AAAA,UACP,QAAQ;AAAA;AAAA,UACR,QAAQ;AAAA;AAAA,UACR,aAAa;AAAA;AAAA,UACb,aAAa;AAAA;AAAA,UACb,SAAS,KAAK;AAAA,UACd,YAAW,oBAAI,KAAM,GAAC,YAAa;AAAA,UACnC,OAAO;AAAA;AAAA,UACP,YAAY;AAAA;AAAA,UACZ,OAAO;AAAA;AAAA;AAET,cAAM,WAAW,MAAM,MAAM,KAAK,mCAAmC,OAAO;AAC5E,YAAI,SAAS,WAAW,OAAO,SAAS,WAAW,KAAK;AAEtD,kBAAQ,IAAI,8BAA8B,SAAS,IAAI;AAAA,eAClD;AAEL,kBAAQ,MAAM,wBAAwB,QAAQ;AAAA,QAChD;AAAA,MACA,SAAO,OAAO;AACd,gBAAQ,MAAM,8BAA8B,KAAK;AAAA,MACnD;AAAA,IACF;AAAA,EACF;;;eAtEKA,eAAAC,WAAA,EAAA,OAAM,cAAa,GAAA,MAAA,CAAA,qGACH,MAAW,WAAA,4SASQ,MAAQ,QAAA,oBAAR,MAAQ,UAAA,IAAA,IAAR,MAAQ,QAAA,IAAA,aAAA,+GAGjC,MAAQ,WAAA,WAAA,SAAA;;;;;;;;;"}